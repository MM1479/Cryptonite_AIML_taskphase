{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76843,"databundleVersionId":8347599,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-20T17:04:16.357057Z","iopub.execute_input":"2024-06-20T17:04:16.357542Z","iopub.status.idle":"2024-06-20T17:04:16.371568Z","shell.execute_reply.started":"2024-06-20T17:04:16.357508Z","shell.execute_reply":"2024-06-20T17:04:16.369916Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"/kaggle/input/regression-competition/sample_submission.csv\n/kaggle/input/regression-competition/train.csv\n/kaggle/input/regression-competition/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/regression-competition/train.csv')\ntest = pd.read_csv('/kaggle/input/regression-competition/test.csv')\n\ny = data['yield']\nX = data.drop(['yield'], axis = 1)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size = 0.8, test_size = 0.2, random_state = 0)\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T17:08:20.626908Z","iopub.execute_input":"2024-06-20T17:08:20.627453Z","iopub.status.idle":"2024-06-20T17:08:20.766383Z","shell.execute_reply.started":"2024-06-20T17:08:20.627412Z","shell.execute_reply":"2024-06-20T17:08:20.764674Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"      id   Row#  clonesize  honeybee  bumbles  andrena  osmia  \\\n0  15000  706.0       25.0      0.50     0.38     0.50   0.50   \n1  15001  265.0       12.5      0.25     0.25     0.63   0.50   \n2  15002  395.0       12.5      0.25     0.38     0.38   0.75   \n3  15003  565.0       25.0      0.50     0.25     0.63   0.63   \n4  15004   16.0       37.5      0.25     0.25     0.25   0.25   \n\n   MaxOfUpperTRange  MinOfUpperTRange  AverageOfUpperTRange  MaxOfLowerTRange  \\\n0              77.4              46.8                  64.7              55.8   \n1              69.7              42.1                  58.2              50.2   \n2              77.4              46.8                  64.7              55.8   \n3              94.6              57.2                  79.0              68.2   \n4              86.0              52.0                  71.9              62.0   \n\n   MinOfLowerTRange  AverageOfLowerTRange  RainingDays  AverageRainingDays  \\\n0              27.0                  45.8         16.0                0.26   \n1              24.3                  41.2         16.0                0.26   \n2              27.0                  45.8         24.0                0.39   \n3              33.0                  55.9         16.0                0.26   \n4              30.0                  50.8         24.0                0.39   \n\n   fruitset  fruitmass      seeds  \n0  0.508275   0.453868  36.018624  \n1  0.552359   0.455405  38.534569  \n2  0.611726   0.509528  42.799055  \n3  0.506794   0.452310  36.674243  \n4  0.386065   0.391583  30.274972  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Row#</th>\n      <th>clonesize</th>\n      <th>honeybee</th>\n      <th>bumbles</th>\n      <th>andrena</th>\n      <th>osmia</th>\n      <th>MaxOfUpperTRange</th>\n      <th>MinOfUpperTRange</th>\n      <th>AverageOfUpperTRange</th>\n      <th>MaxOfLowerTRange</th>\n      <th>MinOfLowerTRange</th>\n      <th>AverageOfLowerTRange</th>\n      <th>RainingDays</th>\n      <th>AverageRainingDays</th>\n      <th>fruitset</th>\n      <th>fruitmass</th>\n      <th>seeds</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15000</td>\n      <td>706.0</td>\n      <td>25.0</td>\n      <td>0.50</td>\n      <td>0.38</td>\n      <td>0.50</td>\n      <td>0.50</td>\n      <td>77.4</td>\n      <td>46.8</td>\n      <td>64.7</td>\n      <td>55.8</td>\n      <td>27.0</td>\n      <td>45.8</td>\n      <td>16.0</td>\n      <td>0.26</td>\n      <td>0.508275</td>\n      <td>0.453868</td>\n      <td>36.018624</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15001</td>\n      <td>265.0</td>\n      <td>12.5</td>\n      <td>0.25</td>\n      <td>0.25</td>\n      <td>0.63</td>\n      <td>0.50</td>\n      <td>69.7</td>\n      <td>42.1</td>\n      <td>58.2</td>\n      <td>50.2</td>\n      <td>24.3</td>\n      <td>41.2</td>\n      <td>16.0</td>\n      <td>0.26</td>\n      <td>0.552359</td>\n      <td>0.455405</td>\n      <td>38.534569</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15002</td>\n      <td>395.0</td>\n      <td>12.5</td>\n      <td>0.25</td>\n      <td>0.38</td>\n      <td>0.38</td>\n      <td>0.75</td>\n      <td>77.4</td>\n      <td>46.8</td>\n      <td>64.7</td>\n      <td>55.8</td>\n      <td>27.0</td>\n      <td>45.8</td>\n      <td>24.0</td>\n      <td>0.39</td>\n      <td>0.611726</td>\n      <td>0.509528</td>\n      <td>42.799055</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15003</td>\n      <td>565.0</td>\n      <td>25.0</td>\n      <td>0.50</td>\n      <td>0.25</td>\n      <td>0.63</td>\n      <td>0.63</td>\n      <td>94.6</td>\n      <td>57.2</td>\n      <td>79.0</td>\n      <td>68.2</td>\n      <td>33.0</td>\n      <td>55.9</td>\n      <td>16.0</td>\n      <td>0.26</td>\n      <td>0.506794</td>\n      <td>0.452310</td>\n      <td>36.674243</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>15004</td>\n      <td>16.0</td>\n      <td>37.5</td>\n      <td>0.25</td>\n      <td>0.25</td>\n      <td>0.25</td>\n      <td>0.25</td>\n      <td>86.0</td>\n      <td>52.0</td>\n      <td>71.9</td>\n      <td>62.0</td>\n      <td>30.0</td>\n      <td>50.8</td>\n      <td>24.0</td>\n      <td>0.39</td>\n      <td>0.386065</td>\n      <td>0.391583</td>\n      <td>30.274972</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nmodel = RandomForestRegressor(random_state = 1)\nmodel.fit(X_train, y_train)\npred = model.predict(X_valid)\nprint(\"MAE is\", mean_absolute_error(y_valid, pred))","metadata":{"execution":{"iopub.status.busy":"2024-06-20T17:04:16.486432Z","iopub.execute_input":"2024-06-20T17:04:16.487031Z","iopub.status.idle":"2024-06-20T17:04:26.115186Z","shell.execute_reply.started":"2024-06-20T17:04:16.486991Z","shell.execute_reply":"2024-06-20T17:04:26.113848Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"MAE is 256.67165058009994\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = model.predict(test)\noutput = pd.DataFrame({'Id': test['id'], 'yield': predictions})\noutput.to_csv('submission.csv', index = False)\nprint(output)","metadata":{"execution":{"iopub.status.busy":"2024-06-20T17:09:57.525150Z","iopub.execute_input":"2024-06-20T17:09:57.525767Z","iopub.status.idle":"2024-06-20T17:09:57.856755Z","shell.execute_reply.started":"2024-06-20T17:09:57.525718Z","shell.execute_reply":"2024-06-20T17:09:57.855184Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"         Id        yield\n0     15000  6225.455573\n1     15001  6883.890127\n2     15002  7683.001549\n3     15003  6261.047325\n4     15004  3884.370418\n...     ...          ...\n9995  24995  6262.192386\n9996  24996  5328.715904\n9997  24997  8051.861069\n9998  24998  3820.934806\n9999  24999  3131.373063\n\n[10000 rows x 2 columns]\n","output_type":"stream"}]}]}