{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d9d3c5a5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-20T17:20:41.510791Z",
     "iopub.status.busy": "2024-06-20T17:20:41.510422Z",
     "iopub.status.idle": "2024-06-20T17:20:42.370866Z",
     "shell.execute_reply": "2024-06-20T17:20:42.369805Z"
    },
    "papermill": {
     "duration": 0.868575,
     "end_time": "2024-06-20T17:20:42.374831",
     "exception": false,
     "start_time": "2024-06-20T17:20:41.506256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/regression-competition/sample_submission.csv\n",
      "/kaggle/input/regression-competition/train.csv\n",
      "/kaggle/input/regression-competition/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1131b309",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-20T17:20:42.384521Z",
     "iopub.status.busy": "2024-06-20T17:20:42.383095Z",
     "iopub.status.idle": "2024-06-20T17:20:43.711464Z",
     "shell.execute_reply": "2024-06-20T17:20:43.710374Z"
    },
    "papermill": {
     "duration": 1.335195,
     "end_time": "2024-06-20T17:20:43.713823",
     "exception": false,
     "start_time": "2024-06-20T17:20:42.378628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Row#</th>\n",
       "      <th>clonesize</th>\n",
       "      <th>honeybee</th>\n",
       "      <th>bumbles</th>\n",
       "      <th>andrena</th>\n",
       "      <th>osmia</th>\n",
       "      <th>MaxOfUpperTRange</th>\n",
       "      <th>MinOfUpperTRange</th>\n",
       "      <th>AverageOfUpperTRange</th>\n",
       "      <th>MaxOfLowerTRange</th>\n",
       "      <th>MinOfLowerTRange</th>\n",
       "      <th>AverageOfLowerTRange</th>\n",
       "      <th>RainingDays</th>\n",
       "      <th>AverageRainingDays</th>\n",
       "      <th>fruitset</th>\n",
       "      <th>fruitmass</th>\n",
       "      <th>seeds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15000</td>\n",
       "      <td>706.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.50</td>\n",
       "      <td>77.4</td>\n",
       "      <td>46.8</td>\n",
       "      <td>64.7</td>\n",
       "      <td>55.8</td>\n",
       "      <td>27.0</td>\n",
       "      <td>45.8</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.508275</td>\n",
       "      <td>0.453868</td>\n",
       "      <td>36.018624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15001</td>\n",
       "      <td>265.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.50</td>\n",
       "      <td>69.7</td>\n",
       "      <td>42.1</td>\n",
       "      <td>58.2</td>\n",
       "      <td>50.2</td>\n",
       "      <td>24.3</td>\n",
       "      <td>41.2</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.552359</td>\n",
       "      <td>0.455405</td>\n",
       "      <td>38.534569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15002</td>\n",
       "      <td>395.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.75</td>\n",
       "      <td>77.4</td>\n",
       "      <td>46.8</td>\n",
       "      <td>64.7</td>\n",
       "      <td>55.8</td>\n",
       "      <td>27.0</td>\n",
       "      <td>45.8</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.611726</td>\n",
       "      <td>0.509528</td>\n",
       "      <td>42.799055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15003</td>\n",
       "      <td>565.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.63</td>\n",
       "      <td>94.6</td>\n",
       "      <td>57.2</td>\n",
       "      <td>79.0</td>\n",
       "      <td>68.2</td>\n",
       "      <td>33.0</td>\n",
       "      <td>55.9</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.506794</td>\n",
       "      <td>0.452310</td>\n",
       "      <td>36.674243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15004</td>\n",
       "      <td>16.0</td>\n",
       "      <td>37.5</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.25</td>\n",
       "      <td>86.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>71.9</td>\n",
       "      <td>62.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>50.8</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.386065</td>\n",
       "      <td>0.391583</td>\n",
       "      <td>30.274972</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id   Row#  clonesize  honeybee  bumbles  andrena  osmia  \\\n",
       "0  15000  706.0       25.0      0.50     0.38     0.50   0.50   \n",
       "1  15001  265.0       12.5      0.25     0.25     0.63   0.50   \n",
       "2  15002  395.0       12.5      0.25     0.38     0.38   0.75   \n",
       "3  15003  565.0       25.0      0.50     0.25     0.63   0.63   \n",
       "4  15004   16.0       37.5      0.25     0.25     0.25   0.25   \n",
       "\n",
       "   MaxOfUpperTRange  MinOfUpperTRange  AverageOfUpperTRange  MaxOfLowerTRange  \\\n",
       "0              77.4              46.8                  64.7              55.8   \n",
       "1              69.7              42.1                  58.2              50.2   \n",
       "2              77.4              46.8                  64.7              55.8   \n",
       "3              94.6              57.2                  79.0              68.2   \n",
       "4              86.0              52.0                  71.9              62.0   \n",
       "\n",
       "   MinOfLowerTRange  AverageOfLowerTRange  RainingDays  AverageRainingDays  \\\n",
       "0              27.0                  45.8         16.0                0.26   \n",
       "1              24.3                  41.2         16.0                0.26   \n",
       "2              27.0                  45.8         24.0                0.39   \n",
       "3              33.0                  55.9         16.0                0.26   \n",
       "4              30.0                  50.8         24.0                0.39   \n",
       "\n",
       "   fruitset  fruitmass      seeds  \n",
       "0  0.508275   0.453868  36.018624  \n",
       "1  0.552359   0.455405  38.534569  \n",
       "2  0.611726   0.509528  42.799055  \n",
       "3  0.506794   0.452310  36.674243  \n",
       "4  0.386065   0.391583  30.274972  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('/kaggle/input/regression-competition/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/regression-competition/test.csv')\n",
    "\n",
    "y = data['yield']\n",
    "X = data.drop(['yield'], axis = 1)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size = 0.8, test_size = 0.2, random_state = 0)\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08f47fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-20T17:20:43.720555Z",
     "iopub.status.busy": "2024-06-20T17:20:43.719885Z",
     "iopub.status.idle": "2024-06-20T17:20:44.074540Z",
     "shell.execute_reply": "2024-06-20T17:20:44.073267Z"
    },
    "papermill": {
     "duration": 0.361175,
     "end_time": "2024-06-20T17:20:44.077528",
     "exception": false,
     "start_time": "2024-06-20T17:20:43.716353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE is 272.8184914614094\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "model = LinearRegression(fit_intercept = True)\n",
    "model.fit(X_train, y_train)\n",
    "pred = model.predict(X_valid)\n",
    "print(\"MAE is\", mean_absolute_error(y_valid, pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bbdf4cf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-20T17:20:44.103111Z",
     "iopub.status.busy": "2024-06-20T17:20:44.102498Z",
     "iopub.status.idle": "2024-06-20T17:20:44.192340Z",
     "shell.execute_reply": "2024-06-20T17:20:44.191186Z"
    },
    "papermill": {
     "duration": 0.106174,
     "end_time": "2024-06-20T17:20:44.195546",
     "exception": false,
     "start_time": "2024-06-20T17:20:44.089372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         id        yield\n",
      "0     15000  6077.871431\n",
      "1     15001  7027.976412\n",
      "2     15002  7901.558462\n",
      "3     15003  6126.894805\n",
      "4     15004  3996.484840\n",
      "...     ...          ...\n",
      "9995  24995  6045.797752\n",
      "9996  24996  5391.897530\n",
      "9997  24997  8167.901920\n",
      "9998  24998  4073.828136\n",
      "9999  24999  5211.610912\n",
      "\n",
      "[10000 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "predictions = model.predict(test)\n",
    "output = pd.DataFrame({'id': test['id'], 'yield': predictions})\n",
    "output.to_csv('submission.csv', index = False)\n",
    "print(output)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8347599,
     "sourceId": 76843,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.902561,
   "end_time": "2024-06-20T17:20:44.737385",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-20T17:20:38.834824",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
