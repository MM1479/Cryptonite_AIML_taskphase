{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd899ddd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:55.516072Z",
     "iopub.status.busy": "2024-06-17T11:05:55.515636Z",
     "iopub.status.idle": "2024-06-17T11:05:56.552722Z",
     "shell.execute_reply": "2024-06-17T11:05:56.550946Z"
    },
    "papermill": {
     "duration": 1.046437,
     "end_time": "2024-06-17T11:05:56.556047",
     "exception": false,
     "start_time": "2024-06-17T11:05:55.509610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/home-data-for-ml-course/sample_submission.csv\n",
      "/kaggle/input/home-data-for-ml-course/sample_submission.csv.gz\n",
      "/kaggle/input/home-data-for-ml-course/train.csv.gz\n",
      "/kaggle/input/home-data-for-ml-course/data_description.txt\n",
      "/kaggle/input/home-data-for-ml-course/test.csv.gz\n",
      "/kaggle/input/home-data-for-ml-course/train.csv\n",
      "/kaggle/input/home-data-for-ml-course/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "86422a21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:56.568455Z",
     "iopub.status.busy": "2024-06-17T11:05:56.566926Z",
     "iopub.status.idle": "2024-06-17T11:05:56.630101Z",
     "shell.execute_reply": "2024-06-17T11:05:56.628965Z"
    },
    "papermill": {
     "duration": 0.072298,
     "end_time": "2024-06-17T11:05:56.633119",
     "exception": false,
     "start_time": "2024-06-17T11:05:56.560821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
       "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
       "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
       "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
       "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
       "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
       "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
       "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
       "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
       "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
       "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
       "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
       "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
       "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
       "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
       "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
       "       'SaleCondition', 'SalePrice'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house_data = pd.read_csv('/kaggle/input/home-data-for-ml-course/train.csv')\n",
    "house_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "25ba7434",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:56.644675Z",
     "iopub.status.busy": "2024-06-17T11:05:56.644158Z",
     "iopub.status.idle": "2024-06-17T11:05:56.662150Z",
     "shell.execute_reply": "2024-06-17T11:05:56.660775Z"
    },
    "papermill": {
     "duration": 0.027366,
     "end_time": "2024-06-17T11:05:56.665255",
     "exception": false,
     "start_time": "2024-06-17T11:05:56.637889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = house_data['SalePrice']\n",
    "X = house_data[['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23411077",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:56.676829Z",
     "iopub.status.busy": "2024-06-17T11:05:56.676365Z",
     "iopub.status.idle": "2024-06-17T11:05:58.588681Z",
     "shell.execute_reply": "2024-06-17T11:05:58.587101Z"
    },
    "papermill": {
     "duration": 1.922065,
     "end_time": "2024-06-17T11:05:58.592088",
     "exception": false,
     "start_time": "2024-06-17T11:05:56.670023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cbef78c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:58.603635Z",
     "iopub.status.busy": "2024-06-17T11:05:58.603177Z",
     "iopub.status.idle": "2024-06-17T11:05:59.202700Z",
     "shell.execute_reply": "2024-06-17T11:05:59.200970Z"
    },
    "papermill": {
     "duration": 0.608708,
     "end_time": "2024-06-17T11:05:59.205596",
     "exception": false,
     "start_time": "2024-06-17T11:05:58.596888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21857.15912981083\n"
     ]
    }
   ],
   "source": [
    "train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)\n",
    "model = RandomForestRegressor(random_state = 1)\n",
    "model.fit(train_X, train_y)\n",
    "preds = model.predict(val_X)\n",
    "mae = mean_absolute_error(val_y, preds)\n",
    "print(mae)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5069c2c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:59.216452Z",
     "iopub.status.busy": "2024-06-17T11:05:59.216053Z",
     "iopub.status.idle": "2024-06-17T11:05:59.906421Z",
     "shell.execute_reply": "2024-06-17T11:05:59.905169Z"
    },
    "papermill": {
     "duration": 0.699155,
     "end_time": "2024-06-17T11:05:59.909295",
     "exception": false,
     "start_time": "2024-06-17T11:05:59.210140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7879.472059621657\n"
     ]
    }
   ],
   "source": [
    "rf_model = RandomForestRegressor(random_state = 1)\n",
    "rf_model.fit(X,y)\n",
    "preds = rf_model.predict(val_X)\n",
    "mae = mean_absolute_error(val_y, preds)\n",
    "print(mae)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f462f6f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:05:59.920053Z",
     "iopub.status.busy": "2024-06-17T11:05:59.919632Z",
     "iopub.status.idle": "2024-06-17T11:05:59.997049Z",
     "shell.execute_reply": "2024-06-17T11:05:59.996008Z"
    },
    "papermill": {
     "duration": 0.086124,
     "end_time": "2024-06-17T11:05:59.999908",
     "exception": false,
     "start_time": "2024-06-17T11:05:59.913784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test = pd.read_csv('/kaggle/input/home-data-for-ml-course/test.csv')\n",
    "test_X = test[['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']]\n",
    "predics = rf_model.predict(test_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd43b828",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-17T11:06:00.010425Z",
     "iopub.status.busy": "2024-06-17T11:06:00.010031Z",
     "iopub.status.idle": "2024-06-17T11:06:00.035719Z",
     "shell.execute_reply": "2024-06-17T11:06:00.034593Z"
    },
    "papermill": {
     "duration": 0.034043,
     "end_time": "2024-06-17T11:06:00.038335",
     "exception": false,
     "start_time": "2024-06-17T11:06:00.004292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>122656.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>156789.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>182959.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>178102.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>189049.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  SalePrice\n",
       "0  1461  122656.58\n",
       "1  1462  156789.00\n",
       "2  1463  182959.00\n",
       "3  1464  178102.00\n",
       "4  1465  189049.48"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "op = pd.DataFrame({'Id': test.Id,'SalePrice': predics})\n",
    "op.to_csv('Output.csv')\n",
    "op.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 111096,
     "sourceId": 10211,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.316335,
   "end_time": "2024-06-17T11:06:00.665055",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-17T11:05:52.348720",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
